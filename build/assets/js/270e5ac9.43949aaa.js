"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[9e3],{26059:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>v,frontMatter:()=>p,metadata:()=>h,toc:()=>b});var o=a(87462),i=(a(67294),a(3905)),n=a(26389),s=a(94891),r=(a(74933),a(47507)),l=a(24310),c=a(63303),d=(a(75035),a(85162));const p={id:"create-election",title:"Create an election",description:"Create an election",sidebar_label:"Create an election",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"createElection",tags:["election"],requestBody:{description:"The payloads must be a base64 representation of the needed JSON objects.",required:!0,content:{"application/json":{schema:{type:"object",required:["txPayload"],properties:{txPayload:{type:"string",example:"Base64 string of NewProcessTx transaction bytes"},metadata:{type:"string",example:"optional: base64 string of election metadata JSON object"}}}}}},responses:{200:{description:"It return txId, electionId and the metadataURL for the newly created election",content:{"application/json":{example:'{\n  "txHash": "transaction hash",\n  "electionID": "election identified as hex string",\n  "metadataURL": "ipfs://Qmcqr...." // link to the published election metadata\n  // if metadataURL is returned empty, means that there is some issue with the storage provider\n}'}}}},description:"Create an election",method:"post",path:"/election",servers:[{url:"https://api.vocdoni.io/version/v3"}],security:[{bearerAuth:[]}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer"}},jsonRequestBodyExample:{txPayload:"Base64 string of NewProcessTx transaction bytes",metadata:"optional: base64 string of election metadata JSON object"},info:{version:"2.0.0",title:"Vocdoni API",license:{name:"MIT"},description:"**Goals and Objectives:** The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing  CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using  Vocdoni, without the hassle of learning a deep platform."},postman:{name:"Create an election",description:{type:"text/plain"},url:{path:["election"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"vocdoni/vocdoni-api"},m=void 0,h={unversionedId:"vocdoni/create-election",id:"vocdoni/create-election",title:"Create an election",description:"Create an election",source:"@site/docs/vocdoni/create-election.api.mdx",sourceDirName:"vocdoni",slug:"/vocdoni/create-election",permalink:"/vocdoni-docs-demo/vocdoni/create-election",draft:!1,editUrl:"https://github.com/PaloAltoNetworks/docusaurus-openapi-docs/tree/main/demo/docs/vocdoni/create-election.api.mdx",tags:[],version:"current",frontMatter:{id:"create-election",title:"Create an election",description:"Create an election",sidebar_label:"Create an election",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"createElection",tags:["election"],requestBody:{description:"The payloads must be a base64 representation of the needed JSON objects.",required:!0,content:{"application/json":{schema:{type:"object",required:["txPayload"],properties:{txPayload:{type:"string",example:"Base64 string of NewProcessTx transaction bytes"},metadata:{type:"string",example:"optional: base64 string of election metadata JSON object"}}}}}},responses:{200:{description:"It return txId, electionId and the metadataURL for the newly created election",content:{"application/json":{example:'{\n  "txHash": "transaction hash",\n  "electionID": "election identified as hex string",\n  "metadataURL": "ipfs://Qmcqr...." // link to the published election metadata\n  // if metadataURL is returned empty, means that there is some issue with the storage provider\n}'}}}},description:"Create an election",method:"post",path:"/election",servers:[{url:"https://api.vocdoni.io/version/v3"}],security:[{bearerAuth:[]}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer"}},jsonRequestBodyExample:{txPayload:"Base64 string of NewProcessTx transaction bytes",metadata:"optional: base64 string of election metadata JSON object"},info:{version:"2.0.0",title:"Vocdoni API",license:{name:"MIT"},description:"**Goals and Objectives:** The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing  CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using  Vocdoni, without the hassle of learning a deep platform."},postman:{name:"Create an election",description:{type:"text/plain"},url:{path:["election"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"vocdoni/vocdoni-api"},sidebar:"petstore",previous:{title:"Count of election emitted votes",permalink:"/vocdoni-docs-demo/vocdoni/election-votes-count"},next:{title:"account",permalink:"/vocdoni-docs-demo/vocdoni/account"}},u={},b=[{value:"Create an election",id:"create-an-election",level:2}],y={toc:b};function v(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,o.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"create-an-election"},"Create an election"),(0,i.kt)("p",null,"Create an election"),(0,i.kt)(s.Z,{mdxType:"MimeTabs"},(0,i.kt)(d.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Request Body"),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:"1rem",marginBottom:"1rem"}},(0,i.kt)("p",null,"The payloads must be a base64 representation of the needed JSON objects."))),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"txPayload",required:!0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"metadata",required:!1,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))),(0,i.kt)("div",null,(0,i.kt)(n.Z,{mdxType:"ApiTabs"},(0,i.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"It return txId, electionId and the metadataURL for the newly created election")),(0,i.kt)("div",null,(0,i.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(d.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(c.Z,{mdxType:"SchemaTabs"},(0,i.kt)(d.Z,{label:"Example",value:"Example",mdxType:"TabItem"},(0,i.kt)(r.Z,{responseExample:'{\n  "txHash": "transaction hash",\n  "electionID": "election identified as hex string",\n  "metadataURL": "ipfs://Qmcqr...." // link to the published election metadata\n  // if metadataURL is returned empty, means that there is some issue with the storage provider\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}v.isMDXComponent=!0}}]);