"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[1380],{52751:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>b,contentTitle:()=>p,default:()=>y,frontMatter:()=>l,metadata:()=>h,toc:()=>m});var n=t(87462),i=(t(67294),t(3905)),a=t(26389),o=t(94891),r=t(74933),d=t(47507),u=(t(24310),t(63303)),c=(t(75035),t(85162));const l={id:"census-publish",title:"Register the census to the storage (IPFS in our case)",description:"- Requires Bearer token - The census is copied to a new census identified by its Merkle Root - The new census **cannot be modified** - The census is published to the storage provided (IPFS in our case) - The new census ID is returned and can be used for querying - If a censusID with the same root has been already published, the request will fail",sidebar_label:"Register the census to the storage (IPFS in our case)",hide_title:!0,hide_table_of_contents:!0,api:{description:"- Requires Bearer token\n- The census is copied to a new census identified by its Merkle Root\n- The new census **cannot be modified**\n- The census is published to the storage provided (IPFS in our case)\n- The new census ID is returned and can be used for querying\n- If a censusID with the same root has been already published, the request will fail",operationId:"censusPublish",security:[{bearerAuth:[]}],tags:["census"],parameters:[{name:"censusId",in:"path",description:"Census id",required:!0,schema:{type:"string",example:"b547a9c83ad7d61b568cf10ebbb25338d680810fa219fa69477cfbd860b386c2"}}],responses:{200:{description:"New census Id and storage uri",content:{"application/json":{example:'{\n  "censusID": "b4a875b03f6f993e9daf804f67a6fc183b7a4d9b6390abcb6d7f56ff14d394b6",\n  "uri": "ipfs://QmQDpDj2s3wNCaDyCkjUaxjPXS9LjmPnWcQoi3TanjRgU1"\n}'}}}},method:"post",path:"/census/{censusId}/publish",servers:[{url:"https://api.vocdoni.io/version/v3"}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer"}},info:{version:"2.0.0",title:"Vocdoni API",license:{name:"MIT"},description:"**Goals and Objectives:** The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing  CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using  Vocdoni, without the hassle of learning a deep platform."},postman:{name:"Register the census to the storage (IPFS in our case)",description:{content:"- Requires Bearer token\n- The census is copied to a new census identified by its Merkle Root\n- The new census **cannot be modified**\n- The census is published to the storage provided (IPFS in our case)\n- The new census ID is returned and can be used for querying\n- If a censusID with the same root has been already published, the request will fail",type:"text/plain"},url:{path:["census",":censusId","publish"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) Census id",type:"text/plain"},type:"any",value:"",key:"censusId"}]},header:[{key:"Accept",value:"application/json"}],method:"POST",auth:{type:"bearer",bearer:[{type:"any",value:"<Bearer Token>",key:"token"}]}}},sidebar_class_name:"post api-method",info_path:"vocdoni/vocdoni-api"},p=void 0,h={unversionedId:"vocdoni/census-publish",id:"vocdoni/census-publish",title:"Register the census to the storage (IPFS in our case)",description:"- Requires Bearer token - The census is copied to a new census identified by its Merkle Root - The new census **cannot be modified** - The census is published to the storage provided (IPFS in our case) - The new census ID is returned and can be used for querying - If a censusID with the same root has been already published, the request will fail",source:"@site/docs/vocdoni/census-publish.api.mdx",sourceDirName:"vocdoni",slug:"/vocdoni/census-publish",permalink:"/vocdoni-docs-demo/build/vocdoni/census-publish",draft:!1,editUrl:"https://github.com/PaloAltoNetworks/docusaurus-openapi-docs/tree/main/demo/docs/vocdoni/census-publish.api.mdx",tags:[],version:"current",frontMatter:{id:"census-publish",title:"Register the census to the storage (IPFS in our case)",description:"- Requires Bearer token - The census is copied to a new census identified by its Merkle Root - The new census **cannot be modified** - The census is published to the storage provided (IPFS in our case) - The new census ID is returned and can be used for querying - If a censusID with the same root has been already published, the request will fail",sidebar_label:"Register the census to the storage (IPFS in our case)",hide_title:!0,hide_table_of_contents:!0,api:{description:"- Requires Bearer token\n- The census is copied to a new census identified by its Merkle Root\n- The new census **cannot be modified**\n- The census is published to the storage provided (IPFS in our case)\n- The new census ID is returned and can be used for querying\n- If a censusID with the same root has been already published, the request will fail",operationId:"censusPublish",security:[{bearerAuth:[]}],tags:["census"],parameters:[{name:"censusId",in:"path",description:"Census id",required:!0,schema:{type:"string",example:"b547a9c83ad7d61b568cf10ebbb25338d680810fa219fa69477cfbd860b386c2"}}],responses:{200:{description:"New census Id and storage uri",content:{"application/json":{example:'{\n  "censusID": "b4a875b03f6f993e9daf804f67a6fc183b7a4d9b6390abcb6d7f56ff14d394b6",\n  "uri": "ipfs://QmQDpDj2s3wNCaDyCkjUaxjPXS9LjmPnWcQoi3TanjRgU1"\n}'}}}},method:"post",path:"/census/{censusId}/publish",servers:[{url:"https://api.vocdoni.io/version/v3"}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer"}},info:{version:"2.0.0",title:"Vocdoni API",license:{name:"MIT"},description:"**Goals and Objectives:** The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing  CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using  Vocdoni, without the hassle of learning a deep platform."},postman:{name:"Register the census to the storage (IPFS in our case)",description:{content:"- Requires Bearer token\n- The census is copied to a new census identified by its Merkle Root\n- The new census **cannot be modified**\n- The census is published to the storage provided (IPFS in our case)\n- The new census ID is returned and can be used for querying\n- If a censusID with the same root has been already published, the request will fail",type:"text/plain"},url:{path:["census",":censusId","publish"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) Census id",type:"text/plain"},type:"any",value:"",key:"censusId"}]},header:[{key:"Accept",value:"application/json"}],method:"POST",auth:{type:"bearer",bearer:[{type:"any",value:"<Bearer Token>",key:"token"}]}}},sidebar_class_name:"post api-method",info_path:"vocdoni/vocdoni-api"},sidebar:"petstore",previous:{title:"Total number of keys added to the census",permalink:"/vocdoni-docs-demo/build/vocdoni/census-size"},next:{title:"Prove the key and weight belong to the census root hash",permalink:"/vocdoni-docs-demo/build/vocdoni/census-verify-key"}},b={},m=[{value:"Register the census to the storage (IPFS in our case)",id:"register-the-census-to-the-storage-ipfs-in-our-case",level:2}],f={toc:m};function y(e){let{components:s,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},f,t,{components:s,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"register-the-census-to-the-storage-ipfs-in-our-case"},"Register the census to the storage (IPFS in our case)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Requires Bearer token"),(0,i.kt)("li",{parentName:"ul"},"The census is copied to a new census identified by its Merkle Root"),(0,i.kt)("li",{parentName:"ul"},"The new census ",(0,i.kt)("strong",{parentName:"li"},"cannot be modified")),(0,i.kt)("li",{parentName:"ul"},"The census is published to the storage provided (IPFS in our case)"),(0,i.kt)("li",{parentName:"ul"},"The new census ID is returned and can be used for querying"),(0,i.kt)("li",{parentName:"ul"},"If a censusID with the same root has been already published, the request will fail")),(0,i.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"Path Parameters")),(0,i.kt)("div",null,(0,i.kt)("ul",null,(0,i.kt)(r.Z,{className:"paramsItem",param:{name:"censusId",in:"path",description:"Census id",required:!0,schema:{type:"string",example:"b547a9c83ad7d61b568cf10ebbb25338d680810fa219fa69477cfbd860b386c2"}},mdxType:"ParamsItem"})))),(0,i.kt)("div",null,(0,i.kt)(a.Z,{mdxType:"ApiTabs"},(0,i.kt)(c.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"New census Id and storage uri")),(0,i.kt)("div",null,(0,i.kt)(o.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(u.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Example",value:"Example",mdxType:"TabItem"},(0,i.kt)(d.Z,{responseExample:'{\n  "censusID": "b4a875b03f6f993e9daf804f67a6fc183b7a4d9b6390abcb6d7f56ff14d394b6",\n  "uri": "ipfs://QmQDpDj2s3wNCaDyCkjUaxjPXS9LjmPnWcQoi3TanjRgU1"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}y.isMDXComponent=!0}}]);