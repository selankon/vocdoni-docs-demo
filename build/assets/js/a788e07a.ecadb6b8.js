"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[5439],{49506:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>b,frontMatter:()=>c,metadata:()=>m,toc:()=>h});var a=i(87462),n=(i(67294),i(3905)),o=i(26389),s=i(94891),d=i(74933),r=i(47507),p=(i(24310),i(63303)),l=(i(75035),i(85162));const c={id:"elections-by-organization-and-status",title:"Get elections by organization id and status",description:"Default page is 0 if no page specified",sidebar_label:"Get elections by organization id and status",hide_title:!0,hide_table_of_contents:!0,api:{description:"Default page is 0 if no page specified",operationId:"electionsByOrganizationAndStatus",tags:["election"],parameters:[{name:"organizationID",in:"path",description:"Organization Id",required:!0,schema:{type:"string",example:"0x370372b92514d81a0e3efb8eba9d036ae0877653"}},{name:"status",in:"path",description:"Status of the election",required:!0,schema:{type:"string",enum:["weighted","zkindexed"],description:"todo(kon): find this on docs\n",example:"weighted|zkindexed"}},{name:"page",in:"path",description:"When returning a list it define de page number. If empty, default is 0",allowEmptyValue:!0,required:!0,schema:{type:"integer",example:1,default:0}}],responses:{200:{description:"It return a list of elections",content:{"application/json":{example:'{\n  "todo": "object"\n}'}}}},method:"get",path:"/election/list/{organizationID}/status/{status}/{page}",servers:[{url:"https://api.vocdoni.io/version/v3"}],security:[{bearerAuth:[]}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer"}},info:{version:"2.0.0",title:"Vocdoni API",license:{name:"MIT"},description:"**Goals and Objectives:** The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing  CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using  Vocdoni, without the hassle of learning a deep platform."},postman:{name:"Get elections by organization id and status",description:{content:"Default page is 0 if no page specified",type:"text/plain"},url:{path:["election","list",":organizationID","status",":status",":page"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) Organization Id",type:"text/plain"},type:"any",value:"",key:"organizationID"},{disabled:!1,description:{content:"(Required) Status of the election",type:"text/plain"},type:"any",value:"",key:"status"},{disabled:!1,description:{content:"(Required) When returning a list it define de page number. If empty, default is 0",type:"text/plain"},type:"any",value:"",key:"page"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"vocdoni/vocdoni-api"},u=void 0,m={unversionedId:"vocdoni/elections-by-organization-and-status",id:"vocdoni/elections-by-organization-and-status",title:"Get elections by organization id and status",description:"Default page is 0 if no page specified",source:"@site/docs/vocdoni/elections-by-organization-and-status.api.mdx",sourceDirName:"vocdoni",slug:"/vocdoni/elections-by-organization-and-status",permalink:"/vocdoni/elections-by-organization-and-status",draft:!1,editUrl:"https://github.com/PaloAltoNetworks/docusaurus-openapi-docs/tree/main/demo/docs/vocdoni/elections-by-organization-and-status.api.mdx",tags:[],version:"current",frontMatter:{id:"elections-by-organization-and-status",title:"Get elections by organization id and status",description:"Default page is 0 if no page specified",sidebar_label:"Get elections by organization id and status",hide_title:!0,hide_table_of_contents:!0,api:{description:"Default page is 0 if no page specified",operationId:"electionsByOrganizationAndStatus",tags:["election"],parameters:[{name:"organizationID",in:"path",description:"Organization Id",required:!0,schema:{type:"string",example:"0x370372b92514d81a0e3efb8eba9d036ae0877653"}},{name:"status",in:"path",description:"Status of the election",required:!0,schema:{type:"string",enum:["weighted","zkindexed"],description:"todo(kon): find this on docs\n",example:"weighted|zkindexed"}},{name:"page",in:"path",description:"When returning a list it define de page number. If empty, default is 0",allowEmptyValue:!0,required:!0,schema:{type:"integer",example:1,default:0}}],responses:{200:{description:"It return a list of elections",content:{"application/json":{example:'{\n  "todo": "object"\n}'}}}},method:"get",path:"/election/list/{organizationID}/status/{status}/{page}",servers:[{url:"https://api.vocdoni.io/version/v3"}],security:[{bearerAuth:[]}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer"}},info:{version:"2.0.0",title:"Vocdoni API",license:{name:"MIT"},description:"**Goals and Objectives:** The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing  CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using  Vocdoni, without the hassle of learning a deep platform."},postman:{name:"Get elections by organization id and status",description:{content:"Default page is 0 if no page specified",type:"text/plain"},url:{path:["election","list",":organizationID","status",":status",":page"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) Organization Id",type:"text/plain"},type:"any",value:"",key:"organizationID"},{disabled:!1,description:{content:"(Required) Status of the election",type:"text/plain"},type:"any",value:"",key:"status"},{disabled:!1,description:{content:"(Required) When returning a list it define de page number. If empty, default is 0",type:"text/plain"},type:"any",value:"",key:"page"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"vocdoni/vocdoni-api"},sidebar:"petstore",previous:{title:"election",permalink:"/vocdoni/election"},next:{title:"List of organization elections",permalink:"/vocdoni/elections-by-organization"}},g={},h=[{value:"Get elections by organization id and status",id:"get-elections-by-organization-id-and-status",level:2}],y={toc:h};function b(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},y,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"get-elections-by-organization-id-and-status"},"Get elections by organization id and status"),(0,n.kt)("p",null,"Default page is 0 if no page specified"),(0,n.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"Path Parameters")),(0,n.kt)("div",null,(0,n.kt)("ul",null,(0,n.kt)(d.Z,{className:"paramsItem",param:{name:"organizationID",in:"path",description:"Organization Id",required:!0,schema:{type:"string",example:"0x370372b92514d81a0e3efb8eba9d036ae0877653"}},mdxType:"ParamsItem"}),(0,n.kt)(d.Z,{className:"paramsItem",param:{name:"status",in:"path",description:"Status of the election",required:!0,schema:{type:"string",enum:["weighted","zkindexed"],description:"todo(kon): find this on docs\n",example:"weighted|zkindexed"}},mdxType:"ParamsItem"}),(0,n.kt)(d.Z,{className:"paramsItem",param:{name:"page",in:"path",description:"When returning a list it define de page number. If empty, default is 0",allowEmptyValue:!0,required:!0,schema:{type:"integer",example:1,default:0}},mdxType:"ParamsItem"})))),(0,n.kt)("div",null,(0,n.kt)(o.Z,{mdxType:"ApiTabs"},(0,n.kt)(l.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,n.kt)("div",null,(0,n.kt)("p",null,"It return a list of elections")),(0,n.kt)("div",null,(0,n.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,n.kt)(l.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,n.kt)(p.Z,{mdxType:"SchemaTabs"},(0,n.kt)(l.Z,{label:"Example",value:"Example",mdxType:"TabItem"},(0,n.kt)(r.Z,{responseExample:'{\n  "todo": "object"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);